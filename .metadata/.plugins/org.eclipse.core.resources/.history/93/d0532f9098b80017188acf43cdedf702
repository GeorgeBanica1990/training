package tests;

import java.util.Date;

import org.junit.Test;
import org.unitils.reflectionassert.ReflectionAssert;

import entities.SequenceEntity;
import entities.SimpleEntity;
import enums.Cover;

public class JpaTest extends TransactionalSetup{

	@Test
	public void testCRUD() {
		
		Date dateForTest = new Date(System.currentTimeMillis());
		// CREATE
		SimpleEntity createdEntity = new SimpleEntity();
		createdEntity.setName("EntityName");
		createdEntity.setCover(Cover.DUST_JACKET);
		createdEntity.setCurrentDate(dateForTest);
		em.persist(createdEntity);
		em.flush();
		
		// TEST CREATE => READ
		em.clear();
		SimpleEntity existingEntity1 = em.find(SimpleEntity.class, createdEntity.getId());
		ReflectionAssert.assertLenientEquals(createdEntity, existingEntity1);

		// UPDATE
		em.clear();
		SimpleEntity updatedEntity = em.find(SimpleEntity.class, createdEntity.getId());
		updatedEntity.setName("gheorghe");
		updatedEntity.setCover(Cover.DUST_JACKET);
		createdEntity.setCurrentDate(dateForTest);
		em.merge(updatedEntity);
		em.flush();
		
		// TEST UPDATE => READ
		em.clear();
		SimpleEntity existingEntity2 = em.find(SimpleEntity.class, createdEntity.getId());
		//adjust to update entity
		createdEntity.setName("gheorghe");
		createdEntity.setCover(Cover.DUST_JACKET);
		createdEntity.setCurrentDate(dateForTest);
		ReflectionAssert.assertLenientEquals(createdEntity, existingEntity2);

		TEST DELETE
		em.createQuery("delete from SimpleEntity").executeUpdate();
		List<SimpleEntity> resutlAfterDelete = em.createQuery("select s from SimpleEntity s", SimpleEntity.class).getResultList();
		ReflectionAssert.assertLenientEquals(resutlAfterDelete, new ArrayList<SimpleEntity>());
		
	}
	
	@Test
	public void testSequence() {
		SequenceEntity seqEnt = new SequenceEntity();
		seqEnt.setName("test");
		em.persist(seqEnt);
		em.flush();
		
		// TEST CREATE => READ
		em.clear();
		SequenceEntity testent = em.find(SequenceEntity.class, seqEnt.getId());
		ReflectionAssert.assertLenientEquals(seqEnt, testent);
		
	}

}
